#pragma once

#include "common.h"

namespace openset
{
	namespace db
	{
		const int IDSTRLEN = 40;

		const uint64_t BITMASK[] = {
				0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000001,
				0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000010,
				0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000100,
				0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00001000,
				0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00010000,
				0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00100000,
				0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'01000000,
				0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'10000000,
				0b00000000'00000000'00000000'00000000'00000000'00000000'00000001'00000000,
				0b00000000'00000000'00000000'00000000'00000000'00000000'00000010'00000000,
				0b00000000'00000000'00000000'00000000'00000000'00000000'00000100'00000000,
				0b00000000'00000000'00000000'00000000'00000000'00000000'00001000'00000000,
				0b00000000'00000000'00000000'00000000'00000000'00000000'00010000'00000000,
				0b00000000'00000000'00000000'00000000'00000000'00000000'00100000'00000000,
				0b00000000'00000000'00000000'00000000'00000000'00000000'01000000'00000000,
				0b00000000'00000000'00000000'00000000'00000000'00000000'10000000'00000000,
				0b00000000'00000000'00000000'00000000'00000000'00000001'00000000'00000000,
				0b00000000'00000000'00000000'00000000'00000000'00000010'00000000'00000000,
				0b00000000'00000000'00000000'00000000'00000000'00000100'00000000'00000000,
				0b00000000'00000000'00000000'00000000'00000000'00001000'00000000'00000000,
				0b00000000'00000000'00000000'00000000'00000000'00010000'00000000'00000000,
				0b00000000'00000000'00000000'00000000'00000000'00100000'00000000'00000000,
				0b00000000'00000000'00000000'00000000'00000000'01000000'00000000'00000000,
				0b00000000'00000000'00000000'00000000'00000000'10000000'00000000'00000000,
				0b00000000'00000000'00000000'00000000'00000001'00000000'00000000'00000000,
				0b00000000'00000000'00000000'00000000'00000010'00000000'00000000'00000000,
				0b00000000'00000000'00000000'00000000'00000100'00000000'00000000'00000000,
				0b00000000'00000000'00000000'00000000'00001000'00000000'00000000'00000000,
				0b00000000'00000000'00000000'00000000'00010000'00000000'00000000'00000000,
				0b00000000'00000000'00000000'00000000'00100000'00000000'00000000'00000000,
				0b00000000'00000000'00000000'00000000'01000000'00000000'00000000'00000000,
				0b00000000'00000000'00000000'00000000'10000000'00000000'00000000'00000000,
				0b00000000'00000000'00000000'00000001'00000000'00000000'00000000'00000000,
				0b00000000'00000000'00000000'00000010'00000000'00000000'00000000'00000000,
				0b00000000'00000000'00000000'00000100'00000000'00000000'00000000'00000000,
				0b00000000'00000000'00000000'00001000'00000000'00000000'00000000'00000000,
				0b00000000'00000000'00000000'00010000'00000000'00000000'00000000'00000000,
				0b00000000'00000000'00000000'00100000'00000000'00000000'00000000'00000000,
				0b00000000'00000000'00000000'01000000'00000000'00000000'00000000'00000000,
				0b00000000'00000000'00000000'10000000'00000000'00000000'00000000'00000000,
				0b00000000'00000000'00000001'00000000'00000000'00000000'00000000'00000000,
				0b00000000'00000000'00000010'00000000'00000000'00000000'00000000'00000000,
				0b00000000'00000000'00000100'00000000'00000000'00000000'00000000'00000000,
				0b00000000'00000000'00001000'00000000'00000000'00000000'00000000'00000000,
				0b00000000'00000000'00010000'00000000'00000000'00000000'00000000'00000000,
				0b00000000'00000000'00100000'00000000'00000000'00000000'00000000'00000000,
				0b00000000'00000000'01000000'00000000'00000000'00000000'00000000'00000000,
				0b00000000'00000000'10000000'00000000'00000000'00000000'00000000'00000000,
				0b00000000'00000001'00000000'00000000'00000000'00000000'00000000'00000000,
				0b00000000'00000010'00000000'00000000'00000000'00000000'00000000'00000000,
				0b00000000'00000100'00000000'00000000'00000000'00000000'00000000'00000000,
				0b00000000'00001000'00000000'00000000'00000000'00000000'00000000'00000000,
				0b00000000'00010000'00000000'00000000'00000000'00000000'00000000'00000000,
				0b00000000'00100000'00000000'00000000'00000000'00000000'00000000'00000000,
				0b00000000'01000000'00000000'00000000'00000000'00000000'00000000'00000000,
				0b00000000'10000000'00000000'00000000'00000000'00000000'00000000'00000000,
				0b00000001'00000000'00000000'00000000'00000000'00000000'00000000'00000000,
				0b00000010'00000000'00000000'00000000'00000000'00000000'00000000'00000000,
				0b00000100'00000000'00000000'00000000'00000000'00000000'00000000'00000000,
				0b00001000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,
				0b00010000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,
				0b00100000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,
				0b01000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,
				0b10000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000
			};

		enum class columnTypes_e : int32_t
		{
			freeColumn = 0,
			intColumn = 1,
			doubleColumn = 2,
			boolColumn = 3,
			textColumn = 4
		};

#pragma pack(push,1)
		// key type used by Attributes and AttributeBlob class
		struct attr_key_s
		{
			int32_t column{ 0 };
			int64_t value{ 0 };

            attr_key_s() = default;

            attr_key_s(const int32_t column, const int64_t value) :
                column(column),
                value(value)
            {}

			static attr_key_s makeKey(const int32_t column, const int64_t value)
			{
				return {column, value};
			}

			bool operator==(const attr_key_s& other) const
			{
				return (column == other.column
					&& value == other.value);
			}

			bool operator!=(const attr_key_s& other) const
			{
				return (column != other.column
					|| value != other.value);
			}

		};
#pragma pack(pop)
	};
};

namespace std
{
	template <>
	struct hash<openset::db::attr_key_s>
	{
		size_t operator()(const openset::db::attr_key_s& x) const
		{
			return (uint64_t(x.column) << 32) + x.value;
		}
	};
};
